version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            which aws || sudo apt-get install curl
            which aws || sudo apt-get install unzip
            which aws || curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            which aws || unzip awscliv2.zip
            which aws || sudo ./aws/install
            aws cloudformation delete-stack --stack-name \
              "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name \
              "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

  installations:
    description: installs aws, ansible and other dependencies
    steps:
      - run:
          name: Make installations
          command: |
            sudo apt-get install tar
            sudo apt-get install gzip
            sudo apt-get install python3
            which aws || sudo apt-get install curl
            which aws || sudo apt-get install unzip
            which aws || curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            which aws || unzip awscliv2.zip
            which aws || sudo ./aws/install
            # which node || curl -fsSL https://deb.nodesource.com/setup_19.x | sudo -E bash - && \
            # sudo apt-get install -y nodejs
            # install pm2
            sudo apt-get install -y python3-pip
            sudo pip3 install ansible
            export PATH=~/.local/bin:$PATH
            sudo npm install pm2 -g

  install-aws-cli:
    description: installs aws, ansible and other dependencies
    steps:
      - run:
          name: aws cli installation
          command: |
            sudo apt-get install tar
            sudo apt-get install gzip
            sudo apt-get install python3
            which aws || sudo apt-get install curl
            which aws || sudo apt-get install unzip
            which aws || curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            which aws || unzip awscliv2.zip
            which aws || sudo ./aws/install
                  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -k https://kvdb.io/HvxoR29eUKqT5rgiy3dfmE/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
             cd ~/project/backend
             npm install
             npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test
                  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
  
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan Back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar and gzip
          command: |
            yum install -y tar
            yum install -y gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            ip=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text) 
            echo "$ip" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment    

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d5:ff:ce:90:1f:ba:cd:39:8a:86:5e:77:88:ae:7f:9a"]
      - attach_workspace:
          at: ws
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ls
            ls ws
            # copy inventory file
            cp ws/project/.circleci/ansible/inventory.txt \
              .circleci/ansible/inventory.txt
            cd .circleci/ansible
            ls
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment     

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." \
              ~/project/backend/migrations_dump.txt
            then
               curl -k https://kvdb.io/HvxoR29eUKqT5rgiy3dfmE/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
     # Here's where you will add some code to rollback on failure
      - destroy-environment 
      - revert-migrations

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - installations
      - attach_workspace:
          at: ws
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure  
      - destroy-environment 
                    
  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d5:ff:ce:90:1f:ba:cd:39:8a:86:5e:77:88:ae:7f:9a"]
      - installations
      - attach_workspace:
          at: ws
      - run:
          name: Deploy backend
          command: |
            echo "==== view files in dir ===="
            ls
            ls ws
            cp ws/project/.circleci/ansible/inventory.txt .circleci/ansible
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p .circleci/ansible/roles/deploy/files
            echo "=====deploy files content while empty======"
            ls .circleci/ansible/roles/deploy/files
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files
            echo "=====deploy files content======"
            ls .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - install-aws-cli
      - run:
          name: Install dependencies
          command: |
            sudo apt-get install curl
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
      - run:
          name: Backend smoke test.
          command: |
            echo "=== backend ip ===="
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_IP
            BACKEND_IP=$(echo "$BACKEND_IP" | cut -d" " -f1)
            BE_URL="http://$BACKEND_IP:3030/api/status"
            if curl "$BE_URL" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then 
              exit 1
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch, master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]